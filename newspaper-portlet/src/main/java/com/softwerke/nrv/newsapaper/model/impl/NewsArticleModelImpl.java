package com.softwerke.nrv.newsapaper.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.softwerke.nrv.newsapaper.model.NewsArticle;
import com.softwerke.nrv.newsapaper.model.NewsArticleModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NewsArticle service. Represents a row in the &quot;newsartcile_data&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.softwerke.nrv.newsapaper.model.NewsArticleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewsArticleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NewsArticleImpl
 * @see com.softwerke.nrv.newsapaper.model.NewsArticle
 * @see com.softwerke.nrv.newsapaper.model.NewsArticleModel
 * @generated
 */
public class NewsArticleModelImpl extends BaseModelImpl<NewsArticle>
    implements NewsArticleModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a news article model instance should use the {@link com.softwerke.nrv.newsapaper.model.NewsArticle} interface instead.
     */
    public static final String TABLE_NAME = "newsartcile_data";
    public static final Object[][] TABLE_COLUMNS = {
            { "articleId", Types.BIGINT },
            { "author", Types.VARCHAR },
            { "title", Types.VARCHAR },
            { "content", Types.VARCHAR },
            { "status", Types.INTEGER },
            { "createDate", Types.TIMESTAMP },
            { "editorComment", Types.VARCHAR },
            { "updateDate", Types.TIMESTAMP },
            { "authorId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table newsartcile_data (articleId LONG not null primary key,author VARCHAR(75) null,title VARCHAR(75) null,content VARCHAR(75) null,status INTEGER,createDate DATE null,editorComment VARCHAR(75) null,updateDate DATE null,authorId LONG)";
    public static final String TABLE_SQL_DROP = "drop table newsartcile_data";
    public static final String ORDER_BY_JPQL = " ORDER BY newsArticle.articleId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY newsartcile_data.articleId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.softwerke.nrv.newsapaper.model.NewsArticle"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.softwerke.nrv.newsapaper.model.NewsArticle"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.softwerke.nrv.newsapaper.model.NewsArticle"));
    private static ClassLoader _classLoader = NewsArticle.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            NewsArticle.class
        };
    private long _articleId;
    private String _author;
    private String _title;
    private String _content;
    private int _status;
    private Date _createDate;
    private String _editorComment;
    private Date _updateDate;
    private long _authorId;
    private NewsArticle _escapedModel;

    public NewsArticleModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _articleId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setArticleId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _articleId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return NewsArticle.class;
    }

    @Override
    public String getModelClassName() {
        return NewsArticle.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("articleId", getArticleId());
        attributes.put("author", getAuthor());
        attributes.put("title", getTitle());
        attributes.put("content", getContent());
        attributes.put("status", getStatus());
        attributes.put("createDate", getCreateDate());
        attributes.put("editorComment", getEditorComment());
        attributes.put("updateDate", getUpdateDate());
        attributes.put("authorId", getAuthorId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long articleId = (Long) attributes.get("articleId");

        if (articleId != null) {
            setArticleId(articleId);
        }

        String author = (String) attributes.get("author");

        if (author != null) {
            setAuthor(author);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String content = (String) attributes.get("content");

        if (content != null) {
            setContent(content);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        String editorComment = (String) attributes.get("editorComment");

        if (editorComment != null) {
            setEditorComment(editorComment);
        }

        Date updateDate = (Date) attributes.get("updateDate");

        if (updateDate != null) {
            setUpdateDate(updateDate);
        }

        Long authorId = (Long) attributes.get("authorId");

        if (authorId != null) {
            setAuthorId(authorId);
        }
    }

    @Override
    public long getArticleId() {
        return _articleId;
    }

    @Override
    public void setArticleId(long articleId) {
        _articleId = articleId;
    }

    @Override
    public String getAuthor() {
        if (_author == null) {
            return StringPool.BLANK;
        } else {
            return _author;
        }
    }

    @Override
    public void setAuthor(String author) {
        _author = author;
    }

    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @Override
    public String getContent() {
        if (_content == null) {
            return StringPool.BLANK;
        } else {
            return _content;
        }
    }

    @Override
    public void setContent(String content) {
        _content = content;
    }

    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _status = status;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public String getEditorComment() {
        if (_editorComment == null) {
            return StringPool.BLANK;
        } else {
            return _editorComment;
        }
    }

    @Override
    public void setEditorComment(String editorComment) {
        _editorComment = editorComment;
    }

    @Override
    public Date getUpdateDate() {
        return _updateDate;
    }

    @Override
    public void setUpdateDate(Date updateDate) {
        _updateDate = updateDate;
    }

    @Override
    public long getAuthorId() {
        return _authorId;
    }

    @Override
    public void setAuthorId(long authorId) {
        _authorId = authorId;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            NewsArticle.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public NewsArticle toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NewsArticle) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NewsArticleImpl newsArticleImpl = new NewsArticleImpl();

        newsArticleImpl.setArticleId(getArticleId());
        newsArticleImpl.setAuthor(getAuthor());
        newsArticleImpl.setTitle(getTitle());
        newsArticleImpl.setContent(getContent());
        newsArticleImpl.setStatus(getStatus());
        newsArticleImpl.setCreateDate(getCreateDate());
        newsArticleImpl.setEditorComment(getEditorComment());
        newsArticleImpl.setUpdateDate(getUpdateDate());
        newsArticleImpl.setAuthorId(getAuthorId());

        newsArticleImpl.resetOriginalValues();

        return newsArticleImpl;
    }

    @Override
    public int compareTo(NewsArticle newsArticle) {
        long primaryKey = newsArticle.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NewsArticle)) {
            return false;
        }

        NewsArticle newsArticle = (NewsArticle) obj;

        long primaryKey = newsArticle.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<NewsArticle> toCacheModel() {
        NewsArticleCacheModel newsArticleCacheModel = new NewsArticleCacheModel();

        newsArticleCacheModel.articleId = getArticleId();

        newsArticleCacheModel.author = getAuthor();

        String author = newsArticleCacheModel.author;

        if ((author != null) && (author.length() == 0)) {
            newsArticleCacheModel.author = null;
        }

        newsArticleCacheModel.title = getTitle();

        String title = newsArticleCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            newsArticleCacheModel.title = null;
        }

        newsArticleCacheModel.content = getContent();

        String content = newsArticleCacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            newsArticleCacheModel.content = null;
        }

        newsArticleCacheModel.status = getStatus();

        Date createDate = getCreateDate();

        if (createDate != null) {
            newsArticleCacheModel.createDate = createDate.getTime();
        } else {
            newsArticleCacheModel.createDate = Long.MIN_VALUE;
        }

        newsArticleCacheModel.editorComment = getEditorComment();

        String editorComment = newsArticleCacheModel.editorComment;

        if ((editorComment != null) && (editorComment.length() == 0)) {
            newsArticleCacheModel.editorComment = null;
        }

        Date updateDate = getUpdateDate();

        if (updateDate != null) {
            newsArticleCacheModel.updateDate = updateDate.getTime();
        } else {
            newsArticleCacheModel.updateDate = Long.MIN_VALUE;
        }

        newsArticleCacheModel.authorId = getAuthorId();

        return newsArticleCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{articleId=");
        sb.append(getArticleId());
        sb.append(", author=");
        sb.append(getAuthor());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", content=");
        sb.append(getContent());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", editorComment=");
        sb.append(getEditorComment());
        sb.append(", updateDate=");
        sb.append(getUpdateDate());
        sb.append(", authorId=");
        sb.append(getAuthorId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.softwerke.nrv.newsapaper.model.NewsArticle");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>articleId</column-name><column-value><![CDATA[");
        sb.append(getArticleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>author</column-name><column-value><![CDATA[");
        sb.append(getAuthor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>editorComment</column-name><column-value><![CDATA[");
        sb.append(getEditorComment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updateDate</column-name><column-value><![CDATA[");
        sb.append(getUpdateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorId</column-name><column-value><![CDATA[");
        sb.append(getAuthorId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
