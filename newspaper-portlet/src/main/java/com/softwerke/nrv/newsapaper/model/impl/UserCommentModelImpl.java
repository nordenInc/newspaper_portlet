package com.softwerke.nrv.newsapaper.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.softwerke.nrv.newsapaper.model.UserComment;
import com.softwerke.nrv.newsapaper.model.UserCommentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserComment service. Represents a row in the &quot;usercomment_data&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.softwerke.nrv.newsapaper.model.UserCommentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserCommentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserCommentImpl
 * @see com.softwerke.nrv.newsapaper.model.UserComment
 * @see com.softwerke.nrv.newsapaper.model.UserCommentModel
 * @generated
 */
public class UserCommentModelImpl extends BaseModelImpl<UserComment>
    implements UserCommentModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a user comment model instance should use the {@link com.softwerke.nrv.newsapaper.model.UserComment} interface instead.
     */
    public static final String TABLE_NAME = "usercomment_data";
    public static final Object[][] TABLE_COLUMNS = {
            { "commentId", Types.BIGINT },
            { "articleId", Types.BIGINT },
            { "author", Types.VARCHAR },
            { "commentContent", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "authorImageId", Types.BIGINT },
            { "commentTitle", Types.VARCHAR },
            { "imageUrl", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table usercomment_data (commentId LONG not null primary key,articleId LONG,author VARCHAR(75) null,commentContent VARCHAR(75) null,createDate DATE null,authorImageId LONG,commentTitle VARCHAR(75) null,imageUrl VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table usercomment_data";
    public static final String ORDER_BY_JPQL = " ORDER BY userComment.commentId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY usercomment_data.commentId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.softwerke.nrv.newsapaper.model.UserComment"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.softwerke.nrv.newsapaper.model.UserComment"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.softwerke.nrv.newsapaper.model.UserComment"));
    private static ClassLoader _classLoader = UserComment.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            UserComment.class
        };
    private long _commentId;
    private long _articleId;
    private String _author;
    private String _commentContent;
    private Date _createDate;
    private long _authorImageId;
    private String _commentTitle;
    private String _imageUrl;
    private UserComment _escapedModel;

    public UserCommentModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _commentId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setCommentId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _commentId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return UserComment.class;
    }

    @Override
    public String getModelClassName() {
        return UserComment.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("commentId", getCommentId());
        attributes.put("articleId", getArticleId());
        attributes.put("author", getAuthor());
        attributes.put("commentContent", getCommentContent());
        attributes.put("createDate", getCreateDate());
        attributes.put("authorImageId", getAuthorImageId());
        attributes.put("commentTitle", getCommentTitle());
        attributes.put("imageUrl", getImageUrl());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long commentId = (Long) attributes.get("commentId");

        if (commentId != null) {
            setCommentId(commentId);
        }

        Long articleId = (Long) attributes.get("articleId");

        if (articleId != null) {
            setArticleId(articleId);
        }

        String author = (String) attributes.get("author");

        if (author != null) {
            setAuthor(author);
        }

        String commentContent = (String) attributes.get("commentContent");

        if (commentContent != null) {
            setCommentContent(commentContent);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Long authorImageId = (Long) attributes.get("authorImageId");

        if (authorImageId != null) {
            setAuthorImageId(authorImageId);
        }

        String commentTitle = (String) attributes.get("commentTitle");

        if (commentTitle != null) {
            setCommentTitle(commentTitle);
        }

        String imageUrl = (String) attributes.get("imageUrl");

        if (imageUrl != null) {
            setImageUrl(imageUrl);
        }
    }

    @Override
    public long getCommentId() {
        return _commentId;
    }

    @Override
    public void setCommentId(long commentId) {
        _commentId = commentId;
    }

    @Override
    public long getArticleId() {
        return _articleId;
    }

    @Override
    public void setArticleId(long articleId) {
        _articleId = articleId;
    }

    @Override
    public String getAuthor() {
        if (_author == null) {
            return StringPool.BLANK;
        } else {
            return _author;
        }
    }

    @Override
    public void setAuthor(String author) {
        _author = author;
    }

    @Override
    public String getCommentContent() {
        if (_commentContent == null) {
            return StringPool.BLANK;
        } else {
            return _commentContent;
        }
    }

    @Override
    public void setCommentContent(String commentContent) {
        _commentContent = commentContent;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public long getAuthorImageId() {
        return _authorImageId;
    }

    @Override
    public void setAuthorImageId(long authorImageId) {
        _authorImageId = authorImageId;
    }

    @Override
    public String getCommentTitle() {
        if (_commentTitle == null) {
            return StringPool.BLANK;
        } else {
            return _commentTitle;
        }
    }

    @Override
    public void setCommentTitle(String commentTitle) {
        _commentTitle = commentTitle;
    }

    @Override
    public String getImageUrl() {
        if (_imageUrl == null) {
            return StringPool.BLANK;
        } else {
            return _imageUrl;
        }
    }

    @Override
    public void setImageUrl(String imageUrl) {
        _imageUrl = imageUrl;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            UserComment.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public UserComment toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (UserComment) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        UserCommentImpl userCommentImpl = new UserCommentImpl();

        userCommentImpl.setCommentId(getCommentId());
        userCommentImpl.setArticleId(getArticleId());
        userCommentImpl.setAuthor(getAuthor());
        userCommentImpl.setCommentContent(getCommentContent());
        userCommentImpl.setCreateDate(getCreateDate());
        userCommentImpl.setAuthorImageId(getAuthorImageId());
        userCommentImpl.setCommentTitle(getCommentTitle());
        userCommentImpl.setImageUrl(getImageUrl());

        userCommentImpl.resetOriginalValues();

        return userCommentImpl;
    }

    @Override
    public int compareTo(UserComment userComment) {
        long primaryKey = userComment.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof UserComment)) {
            return false;
        }

        UserComment userComment = (UserComment) obj;

        long primaryKey = userComment.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<UserComment> toCacheModel() {
        UserCommentCacheModel userCommentCacheModel = new UserCommentCacheModel();

        userCommentCacheModel.commentId = getCommentId();

        userCommentCacheModel.articleId = getArticleId();

        userCommentCacheModel.author = getAuthor();

        String author = userCommentCacheModel.author;

        if ((author != null) && (author.length() == 0)) {
            userCommentCacheModel.author = null;
        }

        userCommentCacheModel.commentContent = getCommentContent();

        String commentContent = userCommentCacheModel.commentContent;

        if ((commentContent != null) && (commentContent.length() == 0)) {
            userCommentCacheModel.commentContent = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            userCommentCacheModel.createDate = createDate.getTime();
        } else {
            userCommentCacheModel.createDate = Long.MIN_VALUE;
        }

        userCommentCacheModel.authorImageId = getAuthorImageId();

        userCommentCacheModel.commentTitle = getCommentTitle();

        String commentTitle = userCommentCacheModel.commentTitle;

        if ((commentTitle != null) && (commentTitle.length() == 0)) {
            userCommentCacheModel.commentTitle = null;
        }

        userCommentCacheModel.imageUrl = getImageUrl();

        String imageUrl = userCommentCacheModel.imageUrl;

        if ((imageUrl != null) && (imageUrl.length() == 0)) {
            userCommentCacheModel.imageUrl = null;
        }

        return userCommentCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{commentId=");
        sb.append(getCommentId());
        sb.append(", articleId=");
        sb.append(getArticleId());
        sb.append(", author=");
        sb.append(getAuthor());
        sb.append(", commentContent=");
        sb.append(getCommentContent());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", authorImageId=");
        sb.append(getAuthorImageId());
        sb.append(", commentTitle=");
        sb.append(getCommentTitle());
        sb.append(", imageUrl=");
        sb.append(getImageUrl());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("com.softwerke.nrv.newsapaper.model.UserComment");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>commentId</column-name><column-value><![CDATA[");
        sb.append(getCommentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>articleId</column-name><column-value><![CDATA[");
        sb.append(getArticleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>author</column-name><column-value><![CDATA[");
        sb.append(getAuthor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>commentContent</column-name><column-value><![CDATA[");
        sb.append(getCommentContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorImageId</column-name><column-value><![CDATA[");
        sb.append(getAuthorImageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>commentTitle</column-name><column-value><![CDATA[");
        sb.append(getCommentTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>imageUrl</column-name><column-value><![CDATA[");
        sb.append(getImageUrl());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
