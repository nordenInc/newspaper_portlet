package com.softwerke.nrv.newsapaper.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.softwerke.nrv.newsapaper.model.UserComment;
import com.softwerke.nrv.newsapaper.service.UserCommentLocalService;
import com.softwerke.nrv.newsapaper.service.persistence.NewsArticlePersistence;
import com.softwerke.nrv.newsapaper.service.persistence.UserCommentPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the user comment local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.softwerke.nrv.newsapaper.service.impl.UserCommentLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.softwerke.nrv.newsapaper.service.impl.UserCommentLocalServiceImpl
 * @see com.softwerke.nrv.newsapaper.service.UserCommentLocalServiceUtil
 * @generated
 */
public abstract class UserCommentLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements UserCommentLocalService,
        IdentifiableBean {
    @BeanReference(type = com.softwerke.nrv.newsapaper.service.NewsArticleLocalService.class)
    protected com.softwerke.nrv.newsapaper.service.NewsArticleLocalService newsArticleLocalService;
    @BeanReference(type = NewsArticlePersistence.class)
    protected NewsArticlePersistence newsArticlePersistence;
    @BeanReference(type = com.softwerke.nrv.newsapaper.service.UserCommentLocalService.class)
    protected com.softwerke.nrv.newsapaper.service.UserCommentLocalService userCommentLocalService;
    @BeanReference(type = UserCommentPersistence.class)
    protected UserCommentPersistence userCommentPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private UserCommentLocalServiceClpInvoker _clpInvoker = new UserCommentLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.softwerke.nrv.newsapaper.service.UserCommentLocalServiceUtil} to access the user comment local service.
     */

    /**
     * Adds the user comment to the database. Also notifies the appropriate model listeners.
     *
     * @param userComment the user comment
     * @return the user comment that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public UserComment addUserComment(UserComment userComment)
        throws SystemException {
        userComment.setNew(true);

        return userCommentPersistence.update(userComment);
    }

    /**
     * Creates a new user comment with the primary key. Does not add the user comment to the database.
     *
     * @param commentId the primary key for the new user comment
     * @return the new user comment
     */
    @Override
    public UserComment createUserComment(long commentId) {
        return userCommentPersistence.create(commentId);
    }

    /**
     * Deletes the user comment with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param commentId the primary key of the user comment
     * @return the user comment that was removed
     * @throws PortalException if a user comment with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public UserComment deleteUserComment(long commentId)
        throws PortalException, SystemException {
        return userCommentPersistence.remove(commentId);
    }

    /**
     * Deletes the user comment from the database. Also notifies the appropriate model listeners.
     *
     * @param userComment the user comment
     * @return the user comment that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public UserComment deleteUserComment(UserComment userComment)
        throws SystemException {
        return userCommentPersistence.remove(userComment);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(UserComment.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return userCommentPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.softwerke.nrv.newsapaper.model.impl.UserCommentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return userCommentPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.softwerke.nrv.newsapaper.model.impl.UserCommentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return userCommentPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return userCommentPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return userCommentPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public UserComment fetchUserComment(long commentId)
        throws SystemException {
        return userCommentPersistence.fetchByPrimaryKey(commentId);
    }

    /**
     * Returns the user comment with the primary key.
     *
     * @param commentId the primary key of the user comment
     * @return the user comment
     * @throws PortalException if a user comment with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public UserComment getUserComment(long commentId)
        throws PortalException, SystemException {
        return userCommentPersistence.findByPrimaryKey(commentId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return userCommentPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the user comments.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.softwerke.nrv.newsapaper.model.impl.UserCommentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of user comments
     * @param end the upper bound of the range of user comments (not inclusive)
     * @return the range of user comments
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<UserComment> getUserComments(int start, int end)
        throws SystemException {
        return userCommentPersistence.findAll(start, end);
    }

    /**
     * Returns the number of user comments.
     *
     * @return the number of user comments
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getUserCommentsCount() throws SystemException {
        return userCommentPersistence.countAll();
    }

    /**
     * Updates the user comment in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param userComment the user comment
     * @return the user comment that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public UserComment updateUserComment(UserComment userComment)
        throws SystemException {
        return userCommentPersistence.update(userComment);
    }

    /**
     * Returns the news article local service.
     *
     * @return the news article local service
     */
    public com.softwerke.nrv.newsapaper.service.NewsArticleLocalService getNewsArticleLocalService() {
        return newsArticleLocalService;
    }

    /**
     * Sets the news article local service.
     *
     * @param newsArticleLocalService the news article local service
     */
    public void setNewsArticleLocalService(
        com.softwerke.nrv.newsapaper.service.NewsArticleLocalService newsArticleLocalService) {
        this.newsArticleLocalService = newsArticleLocalService;
    }

    /**
     * Returns the news article persistence.
     *
     * @return the news article persistence
     */
    public NewsArticlePersistence getNewsArticlePersistence() {
        return newsArticlePersistence;
    }

    /**
     * Sets the news article persistence.
     *
     * @param newsArticlePersistence the news article persistence
     */
    public void setNewsArticlePersistence(
        NewsArticlePersistence newsArticlePersistence) {
        this.newsArticlePersistence = newsArticlePersistence;
    }

    /**
     * Returns the user comment local service.
     *
     * @return the user comment local service
     */
    public com.softwerke.nrv.newsapaper.service.UserCommentLocalService getUserCommentLocalService() {
        return userCommentLocalService;
    }

    /**
     * Sets the user comment local service.
     *
     * @param userCommentLocalService the user comment local service
     */
    public void setUserCommentLocalService(
        com.softwerke.nrv.newsapaper.service.UserCommentLocalService userCommentLocalService) {
        this.userCommentLocalService = userCommentLocalService;
    }

    /**
     * Returns the user comment persistence.
     *
     * @return the user comment persistence
     */
    public UserCommentPersistence getUserCommentPersistence() {
        return userCommentPersistence;
    }

    /**
     * Sets the user comment persistence.
     *
     * @param userCommentPersistence the user comment persistence
     */
    public void setUserCommentPersistence(
        UserCommentPersistence userCommentPersistence) {
        this.userCommentPersistence = userCommentPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.softwerke.nrv.newsapaper.model.UserComment",
            userCommentLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.softwerke.nrv.newsapaper.model.UserComment");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return UserComment.class;
    }

    protected String getModelClassName() {
        return UserComment.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = userCommentPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
